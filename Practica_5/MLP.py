import numpy as np
import math

class MLP:

    """
    Constructor: Computes MLP.

    Args:
        inputLayer (int): size of input
        hiddenLayer (int): size of hidden layer.
        outputLayer (int): size of output layer
        seed (scalar): seed of the random numeric.
        epislom (scalar) : random initialization range. e.j: 1 = [-1..1], 2 = [-2,2]...
    """

    def __init__(self,inputLayer,hidenLayer, outputLayer, seed=0, epislom = 0.12):
        # Inicializamos  aleatoriamente los parámetros de Theta 1 y 2 
        # Estos son los pesos que se ajustan durante el entrenamiento
        # np.random.seed establece la semilla para la generación de números aleatorios
        
        # Se recomienda que los valores aleatorios para theta esten en el rango [-epislom, epislom]
        # De esta forma, los parametros se mantienen pequeños y hace el aprendizaje mas eficiente
        # El +1 es para añadir el bias
        np.random.seed(seed)
        self.theta1 = np.random.uniform(-epislom, epislom, (hidenLayer, inputLayer+1))
        self.theta2 = np.random.uniform(-epislom, epislom, (outputLayer, hidenLayer+1))        

        """
    Reset the theta matrix created in the constructor by both theta matrix manualy loaded.

    Args:
        theta1 (array_like): Weights for the first layer in the neural network.
        theta2 (array_like): Weights for the second layer in the neural network.
    """
    def new_trained(self,theta1,theta2):
        self.theta1 = theta1
        self.theta2 = theta2
        
    """
    Num elements in the training data. (private)

    Args:
        x (array_like): input data. 
    """
    def _size(self,x):
        return x.shape[0]
    
    """
    Computes de sigmoid function of z (private)

    Args:
        z (array_like): activation signal received by the layer.
    """
    def _sigmoid(self,z):
        return 1/(1+np.exp(-z))

    """
    Computes de sigmoid derivation of de activation (private)

    Args:
        a (array_like): activation received by the layer.
    """   
    def _sigmoidPrime(self,a):
        return a * (1 - a)

    """
    Run the feedwordwar neural network step

    Args:
        x (array_like): input of the neural network.

	Return 
	------
	a1,a2,a3 (array_like): activation functions of each layers
    z2,z3 (array_like): signal fuction of two last layers
    """
    def feedforward(self,x):
        # Añadimos el bias a la primera capa
        # np.hstack inserta un valor en una posición de un array. En este caso, añadimos un 1 al principio del array x (Esto es el bias)
        # El bias es un valor no regulado que se añade a la entrada de cada capa de la red neuronal. Este valor se multiplica por un peso que se ajusta durante el entrenamiento
        a1 = np.hstack([np.ones((x.shape[0], 1)), x])
        
        # Calculamos la activación de la segunda capa. Esta operacion calcula la suma de los pesos por las activaciones de la primera capa
        # np.dot multiplica dos arrays de la misma longitud elemento a elemento y devuelve un array con el resultado
        
        z2 = np.dot(a1, self.theta1.T)
        
        # Aplicamos la funcion sigmoide a la suma anterior y añadimos otro bias
        a2 = self._sigmoid(z2)
        a2 = np.hstack([np.ones((z2.shape[0], 1)), a2])

        # Calculamos la activación de la tercera capa. Esta operacion calcula la suma de los pesos por las activaciones de la segunda capa
        z3 = np.dot(a2, self.theta2.T)
        
        # Aplicamos la funcion sigmoide a la suma anterior. Esta es la salida de la red
        a3 = self._sigmoid(z3)
        
        return a1,a2,a3,z2,z3 # devolvemos a parte de las activaciones, los valores sin ejecutar la función de activación


    """
    Computes only the cost of a previously generated output (private)

    Args:
        yPrime (array_like): output generated by neural network.
        y (array_like): output from the dataset
        lambda_ (scalar): regularization parameter

	Return 
	------
	J (scalar): the cost.
    """
    def compute_cost(self, yPrime,y, lambda_): # es una función interna por eso empieza por _
        J = 0
        m = self._size(y)
        cost = y * np.log(yPrime) + (1-y) * np.log(1-yPrime)
        J = -np.sum(cost)
        J = J/m

        # Calculamos la regularización L2 teniendo en cuenta lo anterior
        reg_cost = self._regularizationL2Cost(m, lambda_)
        J = J + reg_cost        
        
        return J
    

    """
    Get the class with highest activation value

    Args:
        a3 (array_like): output generated by neural network.

	Return 
	------
	p (scalar): the class index with the highest activation value.
    """
    def predict(self,a3):
        # Devolvemos el indice del valor más alto del array a3 generado por el feedforward
        return np.argmax(a3, axis=1)
    

    """
    Compute the gradients of both theta matrix parámeters and cost J

    Args:
        x (array_like): input of the neural network.
        y (array_like): output of the neural network.
        lambda_ (scalar): regularization.

	Return 
	------
	J: cost
    grad1, grad2: the gradient matrix (same shape than theta1 and theta2)
    """
    def compute_gradients(self, x, y, lambda_):
        ##TO-DO
        J,grad1,grad2 = 0,0,0

        # Calculamos el feedforward
        a1,a2,a3,z2,z3 = self.feedforward(x)

        # Calculamos el coste
        J = self.compute_cost(a3,y,lambda_)

        #Backpropagation
        delta3 = a3 - y
        delta2 = np.dot(delta3, self.theta2[:,1:]) * self._sigmoidPrime(a2[:,1:]) #Si no furula quitar el [:,1:]

        #Calculo de la regularización
        reg_gradient1 = self._regularizationL2Gradient(self.theta1, lambda_, self._size(a1))
        reg_gradient2 = self._regularizationL2Gradient(self.theta2, lambda_, self._size(a2))

        #Calculo del gradiente
        grad1 = np.dot(delta2.T, a1)/self._size(a1) + reg_gradient1
        grad2 = np.dot(delta3.T, a2)/self._size(a2) + reg_gradient2

        return (J, grad1, grad2)
    
    """
    Compute L2 regularization gradient

    Args:
        theta (array_like): a theta matrix to calculate the regularization.
        lambda_ (scalar): regularization.
        m (scalar): the size of the X examples.

	Return 
	------
	L2 Gradient value
    """
    def _regularizationL2Gradient(self, theta, lambda_, m):
        ##TO-DO
        reg_gradient_final = (lambda_ / m) * theta
        return reg_gradient_final
        
    
    
    """
    Compute L2 regularization cost

    Args:
        lambda_ (scalar): regularization.
        m (scalar): the size of the X examples.

	Return 
	------
	L2 cost value
    """

    def _regularizationL2Cost(self, m, lambda_):
        ##TO-DO
        # Calculamos la regularización L2 y la devolvemos
        reg_cost = np.sum(np.square(self.theta1)) + np.sum(np.square(self.theta2))
        reg_cost_final = lambda_  * reg_cost/ (2 * m)
        return reg_cost_final

    
    
    def backpropagation(self, x, y, alpha, lambda_, numIte, verbose=0):
        Jhistory = []
        for i in range(numIte):
            J = 0
            ##TO-DO: calculate gradients and update both theta matrix
            #Calculamos el gradiente de la función de coste y actualizamos los pesos
            J, grad1, grad2 = self.compute_gradients(x,y,lambda_)
            self.theta1 = self.theta1 - alpha * grad1
            self.theta2 = self.theta2 - alpha * grad2
            Jhistory.append(J)

            if verbose > 0 :
                if i % verbose == 0 or i == (numIte-1):
                    print(f"Iteration {(i+1):6}: Cost {float(J):8.4f}   ")
                   
        return Jhistory
    


"""
target_gradient funcitón of gradient test 1
"""
def target_gradient(input_layer_size,hidden_layer_size,num_labels,x,y,reg_param):
    mlp = MLP(input_layer_size,hidden_layer_size,num_labels)
    J, grad1, grad2 = mlp.compute_gradients(x,y,reg_param)
    return J, grad1, grad2, mlp.theta1, mlp.theta2


"""
costNN funcitón of gradient test 1
"""
def costNN(Theta1, Theta2,x, ys, reg_param):
    mlp = MLP(x.shape[1],1, ys.shape[1])
    mlp.new_trained(Theta1,Theta2)
    J, grad1, grad2 = mlp.compute_gradients(x,ys,reg_param)
    return J, grad1, grad2


"""
mlp_backprop_predict 2 to be execute test 2
"""
def MLP_backprop_predict(X_train,y_train, X_test, alpha, lambda_, num_ite, verbose):
    mlp = MLP(X_train.shape[1],25,y_train.shape[1])
    Jhistory = mlp.backpropagation(X_train,y_train,alpha,lambda_,num_ite,verbose)
    a3= mlp.feedforward(X_test)[2]
    y_pred=mlp.predict(a3)
    return y_pred