import numpy as np
import math

class MLP:

    """
    Constructor: Computes MLP.

    Args:
        inputLayer (int): size of input
        hiddenLayer (int): size of hidden layer.
        outputLayer (int): size of output layer
        seed (scalar): seed of the random numeric.
        epislom (scalar) : random initialization range. e.j: 1 = [-1..1], 2 = [-2,2]...
    """

    def __init__(self, inputLayer, hiddenLayer, outputLayer, seed=0, epislom = 0.12):
    #def __init__(self, inputLayer, numHiddenLayers, hiddenLayer, outputLayer, seed=0, epislom = 0.12):
        
        # Inicializacion de pesos iniciales de la red con valores aleatorios dentro de un rango.
        # Esto asegura que los valores de los pesos permanezcan pequeños y acelera el proceso de aprendizaje
        np.random.seed(seed)
        
        # Cpa inicial oculta
        self.theta1 = np.random.uniform(-epislom, epislom, (hiddenLayer, inputLayer + 1))
        self.theta2 = np.random.uniform(-epislom, epislom, (outputLayer, hiddenLayer + 1))


    """
    Reset the theta matrix created in the constructor by both theta matrix manualy loaded.

    Args:
        theta1 (array_like): Weights for the first layer in the neural network.
        theta2 (array_like): Weights for the second layer in the neural network.
    """

    def new_trained(self,theta1,theta2):
        # Carga manual de red ya entrenada en un archivo
        self.theta1 = theta1
        self.theta2 = theta2
        
    """
    Num elements in the training data. (private)

    Args:
        x (array_like): input data. 
    """
    def _size(self,x):
        return x.shape[0]
    
    """
    Computes de sigmoid function of z (private)

    Args:
        z (array_like): activation signal received by the layer.
    """
    def _sigmoid(self,z):
        return 1 / (1 + np.exp(-z))

    """
    Computes de sigmoid derivation of de activation (private)

    Args:
        a (array_like): activation received by the layer.
    """   
    def _sigmoidPrime(self,a):
        return a * (1 - a)

    """
    Run the feedwordwar neural network step

    Args:
        x (array_like): input of the neural network.

	Return 
	------
	a1,a2,a3 (array_like): activation functions of each layers
    z2,z3 (array_like): signal fuction of two last layers
    """
    def feedforward(self,x):

        # Preparacion de la capa inicial de la red
        # En nuestro caso esto se corresponde a 400 pixeles de la imagen y uno como sesgo adicional
        m = self._size(x)
        a1 = np.hstack([np.ones((m, 1)), x])	# Adicion de neurona de sesgo (Columna de 1s)

        # Primera capa oculta
        z2 = np.dot(a1, self.theta1.T)                  # Activación de la primera capa
        a2 = self._sigmoid(z2)	                        # Normalizacion de la capa oculta
        a2 = np.hstack([np.ones((z2.shape[0], 1)), a2])	# Adicion de neurona de sesgo

        # Capa de salida
        z3 = np.dot(a2, self.theta2.T)  # Pesos de la capa oculta a la de salida
        a3 = self._sigmoid(z3)		    # Activaciones de salida

        return a1,a2,a3,z2,z3 # devolvemos a parte de las activaciones, los valores sin ejecutar la función de activación


    """
    Computes only the cost of a previously generated output (private)

    Args:
        yPrime (array_like): output generated by neural network.
        y (array_like): output from the dataset
        lambda_ (scalar): regularization parameter

	Return 
	------
	J (scalar): the cost.
    """
    def compute_cost(self, yPrime, y, lambda_): # es una función interna por eso empieza por _
        
        m = self._size(y)  # Número de ejemplos
        # Costo sin regularización
        J = (-1 / m) * np.sum(y * np.log(yPrime) + (1 - y) * np.log(1 - yPrime))
        
        # Regularización L2 (excluyendo el sesgo)
        cost_reg = self._regularizationL2Cost(m, lambda_)
        
        return J + cost_reg
    

    """
    Get the class with highest activation value

    Args:
        a3 (array_like): output generated by neural network.

	Return 
	------
	p (scalar): the class index with the highest activation value.
    """
    def predict(self,a3):
        ##TO-DO        
        p = -1
        p = np.argmax(a3, axis=1) 				# "deshace" el one-hot encoding

        return p
    

    """
    Compute the gradients of both theta matrix parámeters and cost J

    Args:
        x (array_like): input of the neural network.
        y (array_like): output of the neural network.
        lambda_ (scalar): regularization.

	Return 
	------
	J: cost
    grad1, grad2: the gradient matrix (same shape than theta1 and theta2)
    """
    def compute_gradients(self, x, y, lambda_):

        # propagacion inicial de la red
        a1,a2,a3,z2,z3 = self.feedforward(x)

        J = self.compute_cost(a3,y,lambda_) # Compute_coste

        # Propagacion sin el sesgo
        delta3 = a3 - y
        delta2 = np.dot(delta3, self.theta2[:,1:]) * self._sigmoidPrime(a2[:,1:])

        # Regularizacion de las  ̶t̶e̶t̶a̶  thetas (No son capas ocultas, solo son pesos que conectan las capas inicial)
        grad1_reg = self._regularizationL2Gradient(self.theta1, lambda_, self._size(a1))
        grad2_reg = self._regularizationL2Gradient(self.theta2, lambda_, self._size(a2))

        # Aplicacion de la gradiente
        grad1 = np.dot(delta2.T, a1)/self._size(a1) + grad1_reg
        grad2 = np.dot(delta3.T, a2)/self._size(a2) + grad2_reg

        return J, grad1, grad2
    
    """
    Compute L2 regularization gradient

    Args:
        theta (array_like): a theta matrix to calculate the regularization.
        lambda_ (scalar): regularization.
        m (scalar): the size of the X examples.

	Return 
	------
	L2 Gradient value
    """
    def _regularizationL2Gradient(self, theta, lambda_, m):
        
        reg_gradient = (lambda_ / m) * theta
        
        # Excluimos el término de sesgo(???)
        reg_gradient[:, 0] = 0
        
        return reg_gradient
    
    
    """
    Compute L2 regularization cost

    Args:
        lambda_ (scalar): regularization.
        m (scalar): the size of the X examples.

	Return 
	------
	L2 cost value
    """

    def _regularizationL2Cost(self, m, lambda_):
        # Caluclamos la regularización sin el sesgo
        return (lambda_ / (2 * m)) * (np.sum(np.square(self.theta1[:, 1:])) + np.sum(np.square(self.theta2[:, 1:])))
        
    
    
    def backpropagation(self, x, y, alpha, lambda_, numIte, verbose=0):
        
        Jhistory = []
        
        for i in range(numIte):
            J = 0
            
            # Calculamos gradiente por cada iteración
            J, grad1, grad2 = self.compute_gradients(x,y,lambda_)
            # Capas de las neuronas
            self.theta1 = self.theta1 - alpha * grad1
            self.theta2 = self.theta2 - alpha * grad2
            
            Jhistory.append(J)

            if verbose > 0 :
                if i % verbose == 0 or i == (numIte-1):
                    print(f"Iteration {(i+1):6}: Cost {float(J):8.4f}   ")
        
        return Jhistory
    


"""
target_gradient funcitón of gradient test 1
"""
def target_gradient(input_layer_size,hidden_layer_size,num_labels,x,y,reg_param):
    mlp = MLP(input_layer_size,hidden_layer_size,num_labels)
    J, grad1, grad2 = mlp.compute_gradients(x,y,reg_param)
    return J, grad1, grad2, mlp.theta1, mlp.theta2


"""
costNN funcitón of gradient test 1
"""
def costNN(Theta1, Theta2,x, ys, reg_param):
    mlp = MLP(x.shape[1],1, ys.shape[1])
    mlp.new_trained(Theta1,Theta2)
    J, grad1, grad2 = mlp.compute_gradients(x,ys,reg_param)
    return J, grad1, grad2


"""
mlp_backprop_predict 2 to be execute test 2
"""
def MLP_backprop_predict(X_train,y_train, X_test, alpha, lambda_, num_ite, verbose):
    mlp = MLP(X_train.shape[1],25,y_train.shape[1])
    Jhistory = mlp.backpropagation(X_train,y_train,alpha,lambda_,num_ite,verbose)
    a3= mlp.feedforward(X_test)[2]
    y_pred=mlp.predict(a3)
    return y_pred